AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  GitHubRepo:
    Type: String
    Description: "The GitHub repository (username/repo) where the code is hosted."
    Default: Arthur-Gyulabyan/vue-todo-app
  GitHubBranch:
    Type: String
    Default: main
    Description: "The branch of the GitHub repository to use for the pipeline."
  GitHubAccessToken:
    Type: String
    Description: "The GitHub Personal Access Token for access to the repository."
    NoEcho: true
  AppName:
    Type: String
    Description: "The name of the application."
    Default: vue-todo-app

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-bucket-${AWS::AccountId}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AppName}-BuildProject"
      Source:
        Type: GITHUB
        Location: !Sub "https://github.com/${GitHubRepo}.git"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: NODE_ENV
            Value: production
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCode
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Select [ 0, !Split [ '/', !Ref GitHubRepo ] ]
                Repo: !Select [ 1, !Split [ '/', !Ref GitHubRepo ] ]
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubAccessToken
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: DeployToS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                BucketName: !Ref S3Bucket
                Extract: true

  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "TodoTable"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: "TodoAppSyncAPI"
      AuthenticationType: API_KEY

  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Expires: 1758672000

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Todo {
          id: ID!
          description: String!
          completed: Boolean!
          createdAt: AWSDateTime!
        }
        
        type Query {
          getTodos: [Todo]
        }
        
        type Mutation {
          createTodo(description: String!): Todo
          updateTodo(id: ID!, completed: Boolean!): Todo
          deleteTodo(id: ID!): Todo
        }
        
        type Subscription {
          onTodoAdded: Todo 
            @aws_subscribe(mutations: ["createTodo"])
          onTodoUpdated: Todo 
            @aws_subscribe(mutations: ["updateTodo"])
          onTodoDeleted: Todo 
            @aws_subscribe(mutations: ["deleteTodo"])
        }
        
        schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }

  AppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: "TodoDynamoDataSource"
      Type: "AMAZON_DYNAMODB"
      DynamoDBConfig:
        TableName: !Ref TodoTable
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn

  AppSyncDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "AppSyncDynamoDBAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - appsync:Subscribe
                  - appsync:StartSubscription
                  - appsync:Connect
                Resource: !GetAtt TodoTable.Arn

  QueryAllTodosResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Query
      FieldName: getTodos
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Scan"
        }
      ResponseMappingTemplate: $util.toJson($context.result.items)

  CreateTodoResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: createTodo
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($util.autoId())
          },
          "attributeValues": {
            "description": $util.dynamodb.toDynamoDBJson($ctx.args.description),
            "completed": $util.dynamodb.toDynamoDBJson(false),
            "createdAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  UpdateTodoResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: updateTodo
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
          "update": {
            "expression": "SET completed = :completed",
            "expressionValues": {
              ":completed": $util.dynamodb.toDynamoDBJson($ctx.args.completed)
            }
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  DeleteTodoResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt AppSyncDataSource.Name
      TypeName: Mutation
      FieldName: deleteTodo
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

Outputs:
  S3BucketURL:
    Description: "URL of the S3 bucket hosting the web app."
    Value: !Sub "http://${S3Bucket}.s3-website.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketURL"
  S3BucketName:
    Description: "Name of the S3 bucket created by the stack."
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketName"
  CodePipelineName:
    Description: "Name of the CodePipeline for continuous deployment."
    Value: !Ref Pipeline
    Export:
      Name: !Sub "${AWS::StackName}-CodePipelineName"
  CodeBuildProjectName:
    Description: "Name of the CodeBuild project used in the pipeline."
    Value: !Ref CodeBuildProject
    Export:
      Name: !Sub "${AWS::StackName}-CodeBuildProjectName"
  AppSyncApiURL:
    Description: "The endpoint for the AppSync GraphQL API"
    Value: !GetAtt AppSyncApi.GraphQLUrl
    Export:
      Name: !Sub "${AWS::StackName}-AppSyncApiURL"
  AppSyncApiKeyValue:
    Description: "The API Key for accessing the AppSync API."
    Value: !Ref AppSyncApiKey
    Export:
      Name: !Sub "${AWS::StackName}-AppSyncApiKey"
  CloudFormationStackName:
    Description: "Name of the CloudFormation stack."
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub "${AWS::StackName}-CloudFormationStackName"
  Region:
    Description: "The AWS region where the stack is deployed."
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${AWS::StackName}-Region"

